{"version":3,"sources":["logo.svg","component/Die.js","component/RollDice.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Die","className","this","props","face","Component","RollDice","state","face1","face2","isroll","roll","dice1","Math","floor","random","side","length","dice2","setState","setTimeout","onClick","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iLAAAA,EAAOC,QAAU,IAA0B,kC,0ICY5BC,E,uKARP,OACI,6BACA,uBAAGC,UAAS,sBAAiBC,KAAKC,MAAMC,a,GAJlCC,aCEGC,E,4MAOjBC,MAAQ,CACJC,MAAQ,MACRC,MAAQ,MACRC,QAAS,G,EAIbC,KAAO,WAEP,IAAIC,EAAQC,KAAKC,MAAMD,KAAKE,SAAW,EAAKZ,MAAMa,KAAKC,QACnDC,EAAQL,KAAKC,MAAMD,KAAKE,SAAW,EAAKZ,MAAMa,KAAKC,QAIvD,EAAKE,SAAS,CAGVT,QAAS,IAGbU,YAAY,WAER,EAAKD,SAAS,CACVX,MAAQ,EAAKL,MAAMa,KAAKJ,GACxBH,MAAQ,EAAKN,MAAMa,KAAKE,GACxBR,QAAQ,MAEd,M,uDAME,OACI,6BACA,yBAAKT,UAAU,kBACX,kBAAC,EAAD,CAAKG,KAAMF,KAAKK,MAAMC,QACtB,kBAAC,EAAD,CAAKJ,KAAMF,KAAKK,MAAME,QAEtB,4BAAQR,UAAU,gBAAgBoB,QAASnB,KAAKS,OAAQT,KAAKK,MAAMG,QAAU,YAC5ER,KAAKK,MAAMG,QAAU,qB,GA/CAL,aAAjBC,EAEVgB,aAAe,CAElBN,KAAO,CAAC,MAAM,MAAM,QAAQ,OAAO,OAAO,QCQnCO,MAXf,WACE,OACE,yBAAKtB,UAAU,OACb,uDAEN,kBAAC,EAAD,QCEoBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4d3ebd23.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\n\r\nclass Die extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n            <i className={`fas fa-dice-${this.props.face}`}></i>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Die;","import React, {Component} from 'react';\r\nimport Die from './Die';\r\n\r\n\r\nexport default class RollDice extends Component{\r\n\r\n    static defaultProps = {\r\n\r\n        side : ['one','two','three','four','five','six']\r\n    }\r\n\r\n    state = {\r\n        face1 : \"one\",\r\n        face2 : \"one\",\r\n        isroll : false\r\n\r\n    }\r\n\r\n    roll = () =>{\r\n\r\n    let dice1 = Math.floor(Math.random() * this.props.side.length); \r\n    let dice2 = Math.floor(Math.random() * this.props.side.length);\r\n\r\n \r\n\r\n    this.setState({\r\n        // face1 : this.props.side[dice1],\r\n        // face2 : this.props.side[dice2],\r\n        isroll : true\r\n    })\r\n\r\n    setTimeout( () =>{\r\n\r\n        this.setState({\r\n            face1 : this.props.side[dice1],\r\n            face2 : this.props.side[dice2],\r\n            isroll: false,\r\n        })\r\n    },500);\r\n\r\n\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n            <div className=\"flex-container\">\r\n                <Die face={this.state.face1}/>\r\n                <Die face={this.state.face2}/>\r\n\r\n                <button className=\"roll-dice-btn\" onClick={this.roll}>{!this.state.isroll && \"Roll Dice\"}\r\n                {this.state.isroll && \"Rolling....\"}</button>\r\n\r\n                \r\n\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport RollDice from './component/RollDice';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>React Roll Dic Exercise</h1>\n\n<RollDice />\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}